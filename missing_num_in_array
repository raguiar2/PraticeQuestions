def first_missing_num(arr):
	if not arr:
		return 1
	arr.sort()
	prev = 0
	for elem in arr:
		curr = elem
		if curr > prev + 1:
			return prev + 1
		prev = curr
	return curr + 1

#print(first_missing_num([1,3,4,5]))

#print(first_missing_num([1,2,3,5]))

#print(first_missing_num([1]))
#print(first_missing_num([]))

import collections
class Allocator(object):
	def __init__(self):
		self.servers = collections.defaultdict(list)
	def allocate(self,server):
		allocnum = first_missing_num(self.servers[server])
		self.servers[server] = self.servers[server][:allocnum] + [allocnum] + self.servers[server][allocnum:]
		return server + str(allocnum)
	def deallocate(self,server):
		servernum = int(server[-1])
		server = server[:-1]
		del self.servers[server][servernum-1]

allocator = Allocator()
print(allocator.allocate('apibox'))
print(allocator.allocate('apibox'))
print(allocator.allocate('sitebox'))
print(allocator.allocate('apibox'))
print(allocator.deallocate('apibox2'))
print(allocator.allocate('apibox'))




Create a ServerManager class with the functions  allocate(string) and deallocate(string) to the following specifications: allocate('apibox') = 'apibox1' allocate('apibox') = 'apibox2' allocate('sitebox') = 'sitebox1' allocate('apibox') = 'apibox3' deallocate('apibox2') allocate('apibox') = 'apibox2'